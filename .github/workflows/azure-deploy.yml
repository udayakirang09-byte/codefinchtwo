# Azure App Service deployment configuration
# Place this in .github/workflows/ directory for GitHub Actions deployment

name: Deploy to Azure App Service

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: |
        npm run typecheck
        chmod +x build-production.sh start-production.sh
        ./build-production.sh
    
    - name: Test database connection
      run: |
        echo "Testing database connection..."
        node -e "
          const { Client } = require('pg');
          const client = new Client({ connectionString: process.env.DATABASE_URL });
          
          async function testConnection() {
            try {
              await client.connect();
              const result = await client.query('SELECT 1 as test');
              console.log('‚úÖ Database connection successful:', result.rows);
              await client.end();
            } catch (err) {
              console.log('‚ùå Database connection failed:', err.message);
              process.exit(1);
            }
          }
          
          testConnection();
        "
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Create missing tables directly
      run: |
        echo "üîß Creating missing tables directly on Azure..."
        node -e "
          const { Client } = require('pg');
          const client = new Client({ connectionString: process.env.DATABASE_URL });
          
          async function createTables() {
            try {
              await client.connect();
              
              // Create mentors table
              await client.query(\`
                CREATE TABLE IF NOT EXISTS mentors (
                  id varchar PRIMARY KEY DEFAULT gen_random_uuid(),
                  user_id varchar NOT NULL,
                  title varchar NOT NULL,
                  description text NOT NULL,
                  specialties jsonb DEFAULT '[]'::jsonb,
                  experience integer NOT NULL,
                  rating decimal(3,2) DEFAULT 0.00,
                  total_students integer DEFAULT 0,
                  hourly_rate decimal(10,2),
                  country varchar NOT NULL DEFAULT 'NA-Country',
                  is_active boolean DEFAULT true,
                  available_slots jsonb DEFAULT '[]'::jsonb,
                  created_at timestamp DEFAULT CURRENT_TIMESTAMP,
                  updated_at timestamp DEFAULT CURRENT_TIMESTAMP
                );
              \`);
              
              // Ensure missing columns exist (fix schema drift)
              await client.query(\`
                ALTER TABLE mentors ADD COLUMN IF NOT EXISTS country varchar NOT NULL DEFAULT 'NA-Country';
              \`);
              
              // Create teacher_audio_metrics table
              await client.query(\`
                CREATE TABLE IF NOT EXISTS teacher_audio_metrics (
                  id varchar PRIMARY KEY DEFAULT gen_random_uuid(),
                  mentor_id varchar NOT NULL,
                  mentor_name varchar NOT NULL,
                  audio_score decimal(3,2) NOT NULL,
                  engagement_level varchar NOT NULL DEFAULT 'medium',
                  total_sessions integer DEFAULT 0,
                  avg_session_duration decimal(8,2) DEFAULT 0.00,
                  student_feedback_score decimal(3,2) DEFAULT 0.00,
                  improvement_areas text,
                  strengths text,
                  last_updated timestamp DEFAULT CURRENT_TIMESTAMP,
                  created_at timestamp DEFAULT CURRENT_TIMESTAMP
                );
              \`);
              
              // Create home_section_controls table
              await client.query(\`
                CREATE TABLE IF NOT EXISTS home_section_controls (
                  id varchar PRIMARY KEY DEFAULT gen_random_uuid(),
                  section_name varchar UNIQUE NOT NULL,
                  is_visible boolean DEFAULT true,
                  display_order integer DEFAULT 0,
                  title varchar,
                  description text,
                  background_color varchar DEFAULT '#ffffff',
                  text_color varchar DEFAULT '#000000',
                  updated_by varchar,
                  created_at timestamp DEFAULT CURRENT_TIMESTAMP,
                  updated_at timestamp DEFAULT CURRENT_TIMESTAMP
                );
              \`);
              
              console.log('‚úÖ Tables created successfully');
              await client.end();
            } catch (err) {
              console.log('‚ùå Table creation failed:', err.message);
              process.exit(1);
            }
          }
          
          createTables();
        "
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Seed database with sample data
      run: |
        echo "üå± Seeding database with sample data..."
        node -e "
          const { Client } = require('pg');
          const client = new Client({ connectionString: process.env.DATABASE_URL });
          
          async function seedData() {
            try {
              await client.connect();
              
              // Seed mentors (now that country column is guaranteed to exist)
              await client.query(\`
                INSERT INTO mentors (id, user_id, title, description, experience, country) VALUES 
                ('ment001', 'user001', 'Senior Python Developer', 'Expert in Python and web development', 5, 'USA'),
                ('ment002', 'user002', 'JavaScript Mentor', 'Full-stack JavaScript specialist', 3, 'Canada')
                ON CONFLICT (id) DO NOTHING;
              \`);
              
              // Seed teacher audio metrics (with fixed IDs for idempotency)
              await client.query(\`
                INSERT INTO teacher_audio_metrics (id, mentor_id, mentor_name, audio_score, engagement_level, total_sessions) VALUES 
                ('tam001', 'ment001', 'Dr. Sarah Johnson', 9.2, 'high', 45),
                ('tam002', 'ment002', 'Prof. Michael Chen', 7.8, 'medium', 32)
                ON CONFLICT (id) DO NOTHING;
              \`);
              
              // Seed home section controls
              await client.query(\`
                INSERT INTO home_section_controls (section_name, is_visible, title) VALUES 
                ('hero', true, 'Welcome to CodeConnect'),
                ('features', true, 'Our Features'),
                ('testimonials', true, 'Student Success Stories')
                ON CONFLICT (section_name) DO NOTHING;
              \`);
              
              console.log('‚úÖ Database seeded successfully');
              await client.end();
            } catch (err) {
              console.log('‚ùå Database seeding failed:', err.message);
              process.exit(1);
            }
          }
          
          seedData();
        "
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Verify tables exist
      run: |
        echo "üîç Verifying tables were created..."
        node -e "
          const { Client } = require('pg');
          const client = new Client({ connectionString: process.env.DATABASE_URL });
          
          async function checkTables() {
            try {
              await client.connect();
              const result = await client.query(\`
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name IN ('mentors', 'teacher_audio_metrics', 'home_section_controls')
              \`);
              const tableNames = result.rows.map(t => t.table_name);
              console.log('üìä Found tables:', tableNames);
              
              if (result.rows.length === 3) {
                console.log('‚úÖ All required tables exist');
              } else {
                console.log('‚ùå Missing tables - only found:', result.rows.length);
                console.log('Expected: mentors, teacher_audio_metrics, home_section_controls');
                process.exit(1);
              }
              await client.end();
            } catch (err) {
              console.log('‚ùå Table verification failed:', err.message);
              process.exit(1);
            }
          }
          
          checkTables();
        "
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Create deployment package
      run: |
        # Create a clean deployment package
        mkdir -p deploy
        cp -r dist deploy/
        cp package.production.json deploy/package.json
        cp start-production.sh deploy/
        cp web.config deploy/
        
        # Install production dependencies for Azure
        cd deploy
        npm install --only=production --no-dev
    
    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: kidzaimathapp30237
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
        package: deploy