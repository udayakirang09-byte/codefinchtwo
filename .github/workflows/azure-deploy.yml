# Azure App Service deployment configuration
# Place this in .github/workflows/ directory for GitHub Actions deployment

name: Deploy to Azure App Service

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: |
        npm run typecheck
        chmod +x build-production.sh start-production.sh
        ./build-production.sh
    
    - name: Test database connection
      run: |
        echo "Testing database connection..."
        node -e "
          const { Client } = require('pg');
          const client = new Client({ connectionString: process.env.DATABASE_URL });
          
          async function testConnection() {
            try {
              await client.connect();
              const result = await client.query('SELECT 1 as test');
              console.log('✅ Database connection successful:', result.rows);
              await client.end();
            } catch (err) {
              console.log('❌ Database connection failed:', err.message);
              process.exit(1);
            }
          }
          
          testConnection();
        "
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Complete database refresh
      run: |
        echo "🔄 Performing complete database refresh on Azure..."
        node -e "
          const { Client } = require('pg');
          const client = new Client({ connectionString: process.env.DATABASE_URL });
          
          async function refreshDatabase() {
            try {
              await client.connect();
              
              console.log('🗑️ Dropping all existing tables...');
              
              // Drop all tables in reverse dependency order
              const dropQueries = [
                'DROP TABLE IF EXISTS teacher_audio_metrics CASCADE;',
                'DROP TABLE IF EXISTS home_section_controls CASCADE;',
                'DROP TABLE IF EXISTS mentors CASCADE;',
                'DROP TABLE IF EXISTS users CASCADE;'
              ];
              
              for (const query of dropQueries) {
                await client.query(query);
              }
              
              console.log('🏗️ Creating fresh database schema...');
              
              // Enable pgcrypto extension for UUID generation
              await client.query('CREATE EXTENSION IF NOT EXISTS pgcrypto;');
              
              // Create users table first
              await client.query(\`
                CREATE TABLE users (
                  id varchar PRIMARY KEY,
                  email varchar UNIQUE NOT NULL,
                  password varchar NOT NULL DEFAULT 'Hello111',
                  first_name varchar,
                  last_name varchar,
                  profile_image_url varchar,
                  role varchar NOT NULL DEFAULT 'student',
                  created_at timestamp DEFAULT CURRENT_TIMESTAMP,
                  updated_at timestamp DEFAULT CURRENT_TIMESTAMP
                );
              \`);
              
              // Create mentors table with FK to users
              await client.query(\`
                CREATE TABLE mentors (
                  id varchar PRIMARY KEY,
                  user_id varchar NOT NULL REFERENCES users(id),
                  title varchar NOT NULL,
                  description text NOT NULL,
                  specialties jsonb DEFAULT '[]'::jsonb,
                  experience integer NOT NULL,
                  rating decimal(3,2) DEFAULT 0.00,
                  total_students integer DEFAULT 0,
                  hourly_rate decimal(10,2),
                  country varchar NOT NULL DEFAULT 'NA-Country',
                  is_active boolean DEFAULT true,
                  available_slots jsonb DEFAULT '[]'::jsonb,
                  created_at timestamp DEFAULT CURRENT_TIMESTAMP,
                  updated_at timestamp DEFAULT CURRENT_TIMESTAMP
                );
              \`);
              
              // Create teacher_audio_metrics table
              await client.query(\`
                CREATE TABLE teacher_audio_metrics (
                  id varchar PRIMARY KEY,
                  mentor_id varchar NOT NULL,
                  mentor_name varchar NOT NULL,
                  audio_score decimal(3,2) NOT NULL,
                  engagement_level varchar NOT NULL DEFAULT 'medium',
                  total_sessions integer DEFAULT 0,
                  avg_session_duration decimal(8,2) DEFAULT 0.00,
                  student_feedback_score decimal(3,2) DEFAULT 0.00,
                  improvement_areas text,
                  strengths text,
                  last_updated timestamp DEFAULT CURRENT_TIMESTAMP,
                  created_at timestamp DEFAULT CURRENT_TIMESTAMP
                );
              \`);
              
              // Create home_section_controls table
              await client.query(\`
                CREATE TABLE home_section_controls (
                  id varchar PRIMARY KEY,
                  section_name varchar UNIQUE NOT NULL,
                  is_visible boolean DEFAULT true,
                  display_order integer DEFAULT 0,
                  title varchar,
                  description text,
                  background_color varchar DEFAULT '#ffffff',
                  text_color varchar DEFAULT '#000000',
                  updated_by varchar,
                  created_at timestamp DEFAULT CURRENT_TIMESTAMP,
                  updated_at timestamp DEFAULT CURRENT_TIMESTAMP
                );
              \`);
              
              console.log('✅ Fresh database schema created successfully');
              await client.end();
            } catch (err) {
              console.log('❌ Database refresh failed:', err.message);
              process.exit(1);
            }
          }
          
          refreshDatabase();
        "
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Seed fresh database with sample data
      run: |
        echo "🌱 Seeding fresh database with sample data..."
        node -e "
          const { Client } = require('pg');
          const client = new Client({ connectionString: process.env.DATABASE_URL });
          
          async function seedFreshData() {
            try {
              await client.connect();
              
              console.log('👥 Seeding users...');
              await client.query(\`
                INSERT INTO users (id, email, password, role, first_name, last_name) VALUES
                ('user001', 'mentor1@example.com', 'Hello111', 'mentor', 'Sarah', 'Johnson'),
                ('user002', 'mentor2@example.com', 'Hello111', 'mentor', 'Michael', 'Chen');
              \`);
              
              console.log('👨‍🏫 Seeding mentors...');
              await client.query(\`
                INSERT INTO mentors (id, user_id, title, description, experience, country) VALUES 
                ('ment001', 'user001', 'Senior Python Developer', 'Expert in Python and web development', 5, 'USA'),
                ('ment002', 'user002', 'JavaScript Mentor', 'Full-stack JavaScript specialist', 3, 'Canada');
              \`);
              
              console.log('📊 Seeding teacher audio metrics...');
              await client.query(\`
                INSERT INTO teacher_audio_metrics (id, mentor_id, mentor_name, audio_score, engagement_level, total_sessions) VALUES 
                ('tam001', 'ment001', 'Dr. Sarah Johnson', 9.2, 'high', 45),
                ('tam002', 'ment002', 'Prof. Michael Chen', 7.8, 'medium', 32);
              \`);
              
              console.log('🏠 Seeding home section controls...');
              await client.query(\`
                INSERT INTO home_section_controls (section_name, is_visible, title) VALUES 
                ('hero', true, 'Welcome to CodeConnect'),
                ('features', true, 'Our Features'),
                ('testimonials', true, 'Student Success Stories');
              \`);
              
              console.log('✅ Fresh database seeded successfully with all sample data');
              await client.end();
            } catch (err) {
              console.log('❌ Database seeding failed:', err.message);
              console.log('Error details:', err);
              process.exit(1);
            }
          }
          
          seedFreshData();
        "
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Verify tables exist
      run: |
        echo "🔍 Verifying tables were created..."
        node -e "
          const { Client } = require('pg');
          const client = new Client({ connectionString: process.env.DATABASE_URL });
          
          async function checkTables() {
            try {
              await client.connect();
              const result = await client.query(\`
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name IN ('mentors', 'teacher_audio_metrics', 'home_section_controls')
              \`);
              const tableNames = result.rows.map(t => t.table_name);
              console.log('📊 Found tables:', tableNames);
              
              if (result.rows.length === 3) {
                console.log('✅ All required tables exist');
              } else {
                console.log('❌ Missing tables - only found:', result.rows.length);
                console.log('Expected: mentors, teacher_audio_metrics, home_section_controls');
                process.exit(1);
              }
              await client.end();
            } catch (err) {
              console.log('❌ Table verification failed:', err.message);
              process.exit(1);
            }
          }
          
          checkTables();
        "
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Create deployment package
      run: |
        # Create a clean deployment package
        mkdir -p deploy
        cp -r dist deploy/
        cp package.production.json deploy/package.json
        cp start-production.sh deploy/
        cp web.config deploy/
        
        # Install production dependencies for Azure
        cd deploy
        npm install --only=production --no-dev
    
    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: kidzaimathapp30237
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
        package: deploy