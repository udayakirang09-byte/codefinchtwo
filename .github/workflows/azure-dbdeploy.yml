name: Azure Database Deployment

on:
  workflow_call:
    secrets:
      DATABASE_URL:
        required: true
      AZURE_POSTGRES_PASSWORD:
        required: true
      DATABASE_URL_NEON:
        required: false

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Test Azure database connection
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        PGSSLMODE: require
      run: |
        echo "🔗 Testing Azure database connection with SSL..."
        if [ -z "$DATABASE_URL" ]; then
          echo "❌ ERROR: DATABASE_URL is empty!"
          echo "📋 Available secrets: DATABASE_URL, AZURE_POSTGRES_PASSWORD"
          exit 1
        fi
        echo "🔍 Connection string length: ${#DATABASE_URL} characters"
        echo "🔍 Connection string starts with: ${DATABASE_URL:0:30}..."
        node -e "
          const { Client } = require('pg');
          const client = new Client({ 
            connectionString: process.env.DATABASE_URL,
            ssl: { rejectUnauthorized: false }
          });
          
          async function testConnection() {
            try {
              await client.connect();
              const result = await client.query('SELECT current_database(), current_user, COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = \\'public\\'');
              console.log('✅ Azure database connection successful:', result.rows[0]);
              await client.end();
            } catch (err) {
              console.log('❌ Azure database connection failed:', err.message);
              process.exit(1);
            }
          }
          
          testConnection();
        "

    - name: Drop existing Azure schema (clean slate)
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        PGSSLMODE: require
      run: |
        echo "🗑️  Dropping all existing tables in Azure..."
        echo "⚠️  This will remove all data and recreate from scratch"
        cd server && npx tsx drop-azure-schema.ts

    - name: Deploy database schema using Drizzle
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        PGSSLMODE: require
        NODE_ENV: production
      run: |
        echo "🏗️ Creating fresh database schema from shared/schema.ts..."
        npm run db:push --force

    - name: Verify schema deployment
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        PGSSLMODE: require
      run: |
        echo "🔍 Verifying schema deployment..."
        node -e "
          const { Client } = require('pg');
          const client = new Client({ 
            connectionString: process.env.DATABASE_URL,
            ssl: { rejectUnauthorized: false }
          });
          
          async function verifySchema() {
            try {
              await client.connect();
              
              // Check table count
              const tableResult = await client.query('SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = \\'public\\'');
              console.log('📊 Tables deployed:', tableResult.rows[0].table_count);
              
              // Check for key tables
              const keyTables = await client.query(\`
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name IN ('users', 'mentors', 'students', 'bookings', 'reviews', 'achievements', 'payment_methods', 'payment_transactions')
                ORDER BY table_name
              \`);
              console.log('🔑 Key tables found:', keyTables.rows.map(r => r.table_name));
              
              if (keyTables.rows.length < 8) {
                console.log('❌ Missing key tables');
                process.exit(1);
              }
              
              // Check for critical columns that must exist
              const criticalColumns = [
                { table: 'bookings', column: 'subject' },
                { table: 'courses', column: 'max_classes' },
                { table: 'transaction_fee_config', column: 'teacher_payout_wait_hours' },
                { table: 'users', column: 'email' },
                { table: 'payment_methods', column: 'user_id' },
                { table: 'payment_methods', column: 'type' },
                { table: 'payment_transactions', column: 'stripe_payment_intent_id' }
              ];
              
              console.log('\\n🔍 Checking critical columns...');
              let missingColumns = [];
              
              for (const check of criticalColumns) {
                const result = await client.query(\`
                  SELECT EXISTS (
                    SELECT 1 FROM information_schema.columns
                    WHERE table_schema = 'public'
                      AND table_name = '\${check.table}'
                      AND column_name = '\${check.column}'
                  )
                \`);
                
                if (!result.rows[0].exists) {
                  console.log(\`❌ Missing: \${check.table}.\${check.column}\`);
                  missingColumns.push(\`\${check.table}.\${check.column}\`);
                } else {
                  console.log(\`✅ Found: \${check.table}.\${check.column}\`);
                }
              }
              
              if (missingColumns.length > 0) {
                console.log(\`\\n❌ Schema incomplete! Missing columns:\`, missingColumns);
                console.log('💡 This means drizzle-kit push did not apply all schema changes.');
                console.log('   The schema exists in shared/schema.ts but was not pushed to Azure.');
                process.exit(1);
              }
              
              console.log('\\n✅ Schema deployment fully verified');
              await client.end();
            } catch (err) {
              console.log('❌ Schema verification failed:', err.message);
              process.exit(1);
            }
          }
          
          verifySchema();
        "

    - name: Sync data from Neon to Azure or seed production data
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DATABASE_URL_NEON: ${{ secrets.DATABASE_URL_NEON }}
        PGSSLMODE: require
        NODE_ENV: production
      run: |
        if [ -n "$DATABASE_URL_NEON" ]; then
          echo "🔄 Syncing data from Neon (Replit) to Azure..."
          echo "📊 This will copy all existing data from your Replit database"
          cd server && npx tsx sync-neon-to-azure.ts
        else
          echo "🌱 Seeding production data (Neon sync not available)..."
          echo "📊 This will create all 34 records: 21 users + 7 mentors + 6 students"
          echo "🔐 Including 5 test accounts: teacher@codeconnect.com, testteacher@apptest.com, udayakirang99@gmail.com, teststudent@apptest.com, admin@codeconnect.com"
          echo "🛡️ Production-ready data with safety checks"
          cd server && npx tsx seed.ts
        fi

    - name: Verify final database state
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        PGSSLMODE: require
      run: |
        echo "✅ Verifying final Azure database state..."
        node -e "
          const { Client } = require('pg');
          const client = new Client({ 
            connectionString: process.env.DATABASE_URL,
            ssl: { rejectUnauthorized: false }
          });
          
          async function verifyFinalState() {
            try {
              await client.connect();
              
              // Get final counts
              const userResult = await client.query('SELECT COUNT(*) as count FROM users');
              const mentorResult = await client.query('SELECT COUNT(*) as count FROM mentors');
              const studentResult = await client.query('SELECT COUNT(*) as count FROM students');
              const bookingResult = await client.query('SELECT COUNT(*) as count FROM bookings');
              
              console.log('🎉 Final Azure database state:');
              console.log('Users:', userResult.rows[0].count);
              console.log('Mentors:', mentorResult.rows[0].count);
              console.log('Students:', studentResult.rows[0].count);
              console.log('Bookings:', bookingResult.rows[0].count);
              
              // Verify test accounts exist
              const testAccounts = await client.query(\`
                SELECT email, role FROM users 
                WHERE email IN ('teacher@codeconnect.com', 'testteacher@apptest.com', 'udayakirang99@gmail.com', 'teststudent@apptest.com', 'admin@codeconnect.com')
                ORDER BY role
              \`);
              
              console.log('🔐 Test accounts verified:');
              testAccounts.rows.forEach(account => {
                console.log(\`- \${account.email} (\${account.role})\`);
              });
              
              // Verify complete sync from Replit (should have 21 users, 7 mentors, 6 students)
              const userCount = parseInt(userResult.rows[0].count);
              const mentorCount = parseInt(mentorResult.rows[0].count);
              const studentCount = parseInt(studentResult.rows[0].count);
              
              if (testAccounts.rows.length >= 5 && userCount >= 21 && mentorCount >= 7 && studentCount >= 6) {
                console.log('✅ Complete Replit data sync verified!');
                console.log(\`📊 Successfully synced: \${userCount} users, \${mentorCount} mentors, \${studentCount} students\`);
              } else {
                console.log('❌ Incomplete data sync detected');
                console.log(\`Expected: ≥21 users, ≥7 mentors, ≥6 students, 5 test accounts\`);
                console.log(\`Got: \${userCount} users, \${mentorCount} mentors, \${studentCount} students, \${testAccounts.rows.length} test accounts\`);
                process.exit(1);
              }
              
              await client.end();
            } catch (err) {
              console.log('❌ Final verification failed:', err.message);
              process.exit(1);
            }
          }
          
          verifyFinalState();
        "
