name: Azure Database Deployment

on:
  workflow_call:
    secrets:
      DATABASE_URL:
        required: true
      AZURE_POSTGRES_PASSWORD:
        required: true

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Test Azure database connection
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "üîó Testing Azure database connection..."
        if [ -z "$DATABASE_URL" ]; then
          echo "‚ùå ERROR: DATABASE_URL is empty!"
          echo "üìã Available secrets: DATABASE_URL, AZURE_POSTGRES_PASSWORD"
          exit 1
        fi
        echo "üîç Connection string length: ${#DATABASE_URL} characters"
        echo "üîç Connection string starts with: ${DATABASE_URL:0:30}..."
        node -e "
          const { Client } = require('pg');
          const client = new Client({ connectionString: process.env.DATABASE_URL });
          
          async function testConnection() {
            try {
              await client.connect();
              const result = await client.query('SELECT current_database(), current_user, COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = \\'public\\'');
              console.log('‚úÖ Azure database connection successful:', result.rows[0]);
              await client.end();
            } catch (err) {
              console.log('‚ùå Azure database connection failed:', err.message);
              process.exit(1);
            }
          }
          
          testConnection();
        "

    - name: Deploy database schema using Drizzle
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NODE_ENV: production
      run: |
        echo "üèóÔ∏è Deploying complete database schema to Azure..."
        npm run db:push --force

    - name: Verify schema deployment
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "üîç Verifying schema deployment..."
        node -e "
          const { Client } = require('pg');
          const client = new Client({ connectionString: process.env.DATABASE_URL });
          
          async function verifySchema() {
            try {
              await client.connect();
              
              // Check table count
              const tableResult = await client.query('SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = \\'public\\'');
              console.log('üìä Tables deployed:', tableResult.rows[0].table_count);
              
              // Check for key tables
              const keyTables = await client.query(\`
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name IN ('users', 'mentors', 'students', 'bookings', 'reviews', 'achievements')
                ORDER BY table_name
              \`);
              console.log('üîë Key tables found:', keyTables.rows.map(r => r.table_name));
              
              if (keyTables.rows.length < 6) {
                console.log('‚ùå Missing key tables');
                process.exit(1);
              }
              
              console.log('‚úÖ Schema deployment verified');
              await client.end();
            } catch (err) {
              console.log('‚ùå Schema verification failed:', err.message);
              process.exit(1);
            }
          }
          
          verifySchema();
        "

    - name: Seed complete production data directly in Azure
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NODE_ENV: production
      run: |
        echo "üå± Seeding complete production data directly in Azure database..."
        echo "üìä This will create all 34 records: 21 users + 7 mentors + 6 students"
        echo "üîê Including 5 test accounts: teacher@codeconnect.com, testteacher@apptest.com, udayakirang99@gmail.com, teststudent@apptest.com, admin@codeconnect.com"
        echo "üõ°Ô∏è Production-ready data with safety checks"
        cd server && npx tsx seed.ts

    - name: Verify final database state
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "‚úÖ Verifying final Azure database state..."
        node -e "
          const { Client } = require('pg');
          const client = new Client({ connectionString: process.env.DATABASE_URL });
          
          async function verifyFinalState() {
            try {
              await client.connect();
              
              // Get final counts
              const userResult = await client.query('SELECT COUNT(*) as count FROM users');
              const mentorResult = await client.query('SELECT COUNT(*) as count FROM mentors');
              const studentResult = await client.query('SELECT COUNT(*) as count FROM students');
              const bookingResult = await client.query('SELECT COUNT(*) as count FROM bookings');
              
              console.log('üéâ Final Azure database state:');
              console.log('Users:', userResult.rows[0].count);
              console.log('Mentors:', mentorResult.rows[0].count);
              console.log('Students:', studentResult.rows[0].count);
              console.log('Bookings:', bookingResult.rows[0].count);
              
              // Verify test accounts exist
              const testAccounts = await client.query(\`
                SELECT email, role FROM users 
                WHERE email IN ('teacher@codeconnect.com', 'testteacher@apptest.com', 'udayakirang99@gmail.com', 'teststudent@apptest.com', 'admin@codeconnect.com')
                ORDER BY role
              \`);
              
              console.log('üîê Test accounts verified:');
              testAccounts.rows.forEach(account => {
                console.log(\`- \${account.email} (\${account.role})\`);
              });
              
              // Verify complete sync from Replit (should have 21 users, 7 mentors, 6 students)
              const userCount = parseInt(userResult.rows[0].count);
              const mentorCount = parseInt(mentorResult.rows[0].count);
              const studentCount = parseInt(studentResult.rows[0].count);
              
              if (testAccounts.rows.length >= 5 && userCount >= 21 && mentorCount >= 7 && studentCount >= 6) {
                console.log('‚úÖ Complete Replit data sync verified!');
                console.log(\`üìä Successfully synced: \${userCount} users, \${mentorCount} mentors, \${studentCount} students\`);
              } else {
                console.log('‚ùå Incomplete data sync detected');
                console.log(\`Expected: ‚â•21 users, ‚â•7 mentors, ‚â•6 students, 5 test accounts\`);
                console.log(\`Got: \${userCount} users, \${mentorCount} mentors, \${studentCount} students, \${testAccounts.rows.length} test accounts\`);
                process.exit(1);
              }
              
              await client.end();
            } catch (err) {
              console.log('‚ùå Final verification failed:', err.message);
              process.exit(1);
            }
          }
          
          verifyFinalState();
        "